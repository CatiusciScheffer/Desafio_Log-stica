from flask import Flask, request, jsonify
import sqlite3
from flask_cors import CORS
import bcrypt
import jwt
from datetime import datetime, UTC, timedelta
import os
import smtplib
import secrets
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from dotenv import load_dotenv

app = Flask(__name__)
CORS(app)

load_dotenv()
SECRET_KEY = os.getenv("SECRET_KEY")


db_path = os.getenv("DB_PATH")
if not os.path.exists("database"):
    try:
        os.makedirs("database")
    except Exception as e:
        print(f"Erro ao criar pasta database: {e}")

def get_db_connection():
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    return conn


# üîπ Rota para cadastrar usu√°rio
@app.route("/cadastrar", methods=["POST"])
def cadastrar():
    data = request.get_json()
    nome = data.get("nome")
    email = data.get("email")
    senha = data.get("senha")

    if not nome or not email or not senha:
        return jsonify({"erro": "Preencha todos os campos!"}), 400

    senha_hash = bcrypt.hashpw(senha.encode("utf-8"), bcrypt.gensalt()).decode("utf-8")

    conn = get_db_connection()
    try:
        conn.execute("INSERT INTO users (user_name, user_email, user_senha) VALUES (?, ?, ?)", (nome, email, senha_hash))
        conn.commit()
        return jsonify({"mensagem": "Usu√°rio cadastrado com sucesso!"}), 201
    except sqlite3.IntegrityError:
        return jsonify({"erro": "E-mail j√° cadastrado!"}), 400
    finally:
        conn.close()


# üîπ Rota para login
@app.route("/login", methods=["POST"])
def login():
    data = request.get_json()
    email = data.get("email")
    senha = data.get("senha")

    if not email or not senha:
        return jsonify({"erro": "Preencha todos os campos!"}), 400

    conn = get_db_connection()
    user = conn.execute("SELECT * FROM users WHERE user_email = ?", (email,)).fetchone()
    conn.close()

    if not user:
        return jsonify({"erro": "E-mail n√£o encontrado!"}), 404

    if not bcrypt.checkpw(senha.encode(), user["user_senha"].encode()):
        return jsonify({"erro": "Senha incorreta!"}), 401

    print(dict(user))  # Verificar no console se o nome est√° correto

    # üîπ Ajuste para capturar corretamente o nome do usu√°rio
    nome_usuario = user["user_name"] if "user_name" in user else user[1]

    token = jwt.encode(
        {
            "id": user["id"],
            "email": email,
            "nome": nome_usuario,  # üîπ Garantindo que o nome v√° para o token
            "exp": datetime.now(UTC) + timedelta(hours=1)
        },
        SECRET_KEY,
        algorithm="HS256"
    )

    return jsonify({"token": token})


            # "exp": datetime.now(UTC) + timedelta(hours=1) 

# üîπ Rota para recuperar senha
@app.route("/esqueci_senha", methods=["POST"])
def esqueci_senha():
    data = request.get_json()
    email = data.get("email")

    conn = get_db_connection()
    user = conn.execute("SELECT * FROM users WHERE user_email = ?", (email,)).fetchone()
    conn.close()

    if not user:
        return jsonify({"erro": "E-mail n√£o encontrado!"}), 404

    token = secrets.token_urlsafe(32)  # Gera um token aleat√≥rio seguro

    # Salva o token no banco 
    token_expira = datetime.utcnow() + timedelta(hours=1)
    conn = get_db_connection()
    # conn.execute("UPDATE users SET reset_token_expiration = ? WHERE user_email = ?", (token, email))
    conn.execute("UPDATE users SET reset_token=?, reset_token_expiration=? WHERE user_email=?", 
             (token, token_expira, email))
    conn.commit()
    conn.close()

    # Enviar e-mail com o link de redefini√ß√£o
    reset_link = f"http://127.0.0.1:5500/redefinir_senha.html?token={token}"
    enviar_email(email, reset_link)

    return jsonify({"mensagem": "E-mail de recupera√ß√£o enviado!"})


# üîπ Rota para enviar email e recuperar senha
def enviar_email(destinatario, link):
    remetente = os.getenv("SMTP_USER")
    senha = os.getenv("SMTP_PASSWORD")

    print(f"üîπ Enviando e-mail para: {destinatario}")  # DEBUG

    # Corpo do e-mail em HTML
    html_content = f"""
    <html>
    <body style="font-family: Arial, sans-serif; color: #333;">
        <h2 style="color: #444444;">Recupera√ß√£o de Senha - Columbus</h2>
        <p>Ol√°,</p>
        <p>Recebemos uma solicita√ß√£o para redefinir sua senha de acesso √† plataforma da <strong>Columbus</strong>.</p>
        <p>Se foi voc√™ quem solicitou, clique no bot√£o abaixo para criar uma nova senha:</p>
        <p style="text-align: center;">
            <a href="{link}" style="
                display: inline-block;
                background-color: #ffdfff;
                color: #008171;
                padding: 12px 20px;
                text-decoration: none;
                border-radius: 8px;
                font-size: 16px;
            ">Redefinir Senha</a>
        </p>
        <p>Se voc√™ n√£o solicitou esta altera√ß√£o, ignore este e-mail. Sua senha permanecer√° a mesma.</p>
        <p>Atenciosamente,</p>
        <p><strong>Equipe Columbus</strong><br>
        Suporte T√©cnico</p>
    </body>
    </html>
    """

    msg = MIMEMultipart()
    msg["Subject"] = "Columbus | Recupera√ß√£o de Senha"
    msg["From"] = remetente
    msg["To"] = destinatario
    msg.attach(MIMEText(html_content, "html"))

    try:
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
            server.login(remetente, senha)
            server.sendmail(remetente, destinatario, msg.as_string())
        print("‚úÖ E-mail enviado com sucesso!")
    except Exception as e:
        print(f"‚ùå Erro ao enviar e-mail: {e}")



# üîπ Rota para redefinir senha
@app.route("/redefinir_senha", methods=["POST"])
def redefinir_senha():
    data = request.get_json()
    token = data.get("token")
    nova_senha = data.get("senha")

    if not token or not nova_senha:
        return jsonify({"erro": "Dados inv√°lidos!"}), 400

    conn = get_db_connection()
    # user = conn.execute("SELECT * FROM users WHERE reset_token_expiration = ?", (token,)).fetchone()
    
    user = conn.execute("SELECT * FROM users WHERE reset_token=? AND reset_token_expiration > ?", 
                    (token, datetime.utcnow())).fetchone()

    if not user:
        return jsonify({"erro": "Token inv√°lido ou expirado!"}), 400

    senha_hash = bcrypt.hashpw(nova_senha.encode(), bcrypt.gensalt()).decode()

    conn.execute("UPDATE users SET user_senha = ?, reset_token_expiration = NULL WHERE reset_token_expiration = ?", (senha_hash, token))
    conn.commit()
    conn.close()

    return jsonify({"mensagem": "Senha redefinida com sucesso!"})


if __name__ == "__main__":
    app.run(debug=True)
